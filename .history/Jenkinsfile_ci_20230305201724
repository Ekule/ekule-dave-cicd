def COLOR_MAP
      'SUCCESS': 'good',
       'FAILURE': 'danger',
pipeline {  
	agent any
	tools {
        maven "maven3.9.0"
        jdk "davjdk8"
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.31.18.75:8081"
        SNAP_REPO = "dave-snapshot"
        RELEASE_REPO= "dave-release"
        NEXUS_USER = "admin"
        NEXUS_PASS = "ayuk1234"
        CENTRAL_REPO = "maven-central-repo"
        NEXUS_GRP_REPO = "dave-group-repo"
        NEXUSIP = "172.31.18.75"
        NEXUSPORT = "8081"
        NEXUS_LOGIN = "nexuslogin"
        SONARSCANNER = "sonarscanner"
        SONARSERVER = "sonarserver"
    }
	
    stages{
        
        stage('BUILD'){
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo 'Archiving'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

	stage('UNIT TEST'){
            steps {
                sh 'mvn  -s settings.xml test'
            }
        }
/*
	stage('INTEGRATION TEST'){
            steps {
                sh 'mvn verify -DskipUnitTests'
            }
        }
		*/
        stage ('checkstyle code analysis'){
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

        stage('code analysis with sonarqube') {
          
		  environment {
             scannerHome = tool "${sonarscanner}"
          }

          steps {
            withSonarQubeEnv("${sonarserver1}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=davepro-sonar \
                   -Dsonar.projectName=davpro-sonar \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }

            
          }
        }
        stage('quality Gate') {
            steps  {
               timeout(time: 1, unit: 'HOURS') {
               waitForQualityGate abortPipeline: true
            }  
            }
        }

        stage('upload artifacts to nexus'){
            steps {
                 nexusArtifactUploader(
        nexusVersion: 'nexus3',
        protocol: 'http',
        nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
        groupId: 'QA',
        version:  "${env.BUILD_ID}-${env.}",
        repository: 'RepositoryName',
        credentialsId: 'CredentialsId',
        artifacts: [
            [artifactId: projectName,
             classifier: '',
             file: 'my-service-' + version + '.jar',
             type: 'jar']
        ]
     )
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version} ARTVERSION";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: NEXUS_REPOGRP_ID,
                            version: ARTVERSION,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } 
		    else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }


    }


}
